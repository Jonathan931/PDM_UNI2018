{
  "_args": [
    [
      "jest-serializer@^24.0.0-alpha.2",
      "/home/jonathan/Projetos/PDM - Android/app1/node_modules/jest-haste-map"
    ]
  ],
  "_from": "jest-serializer@>=24.0.0-alpha.2 <25.0.0",
  "_hasShrinkwrap": false,
  "_id": "jest-serializer@24.0.0-alpha.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/jest-serializer",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_24.0.0-alpha.4_1540571590631_0.5116094564178306"
  },
  "_npmUser": {
    "email": "rubennorte@gmail.com",
    "name": "rubennorte"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "jest-serializer",
    "raw": "jest-serializer@^24.0.0-alpha.2",
    "rawSpec": "^24.0.0-alpha.2",
    "scope": null,
    "spec": ">=24.0.0-alpha.2 <25.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-haste-map"
  ],
  "_resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-24.0.0-alpha.4.tgz",
  "_shasum": "939c31155b95bebc1ef6f76ae34dbf2c06046e52",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@^24.0.0-alpha.2",
  "_where": "/home/jonathan/Projetos/PDM - Android/app1/node_modules/jest-haste-map",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {},
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "fileCount": 4,
    "integrity": "sha512-g/hO2JM6c96wGzbiQNdbOrLlx8p+cA8W8+EwFkKtUlWcmBCxbsZb8TaIK2FLfvxCTKPwMhBujhw46GM5WppAsQ==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb00HHCRA9TVsSAnZWagAAAMcP/0OERthGrn8AOb0V01u3\nXVhYjFPv3Vdza7ThTV2jVo5jGe3kf85oXNk7T5JQnKjI/7aMw430Ijxe1gg2\nUR7qTW/CosC8A/A6dhrzlXHAwIAzwzvtJkvigNqQ3T5qZ+vpPvI7j0BflV46\ntz+7Bqomv+5wty9feDhi3d9X1nm46ZIp3Be693nOSpOuCzcTlPPnWwlNcMXY\nJR9XI/SLwlb79ar+BH28fROLfkFjo2D4htkYJgnNN6oQ8FH0S1NG219K1dlM\nEdQlPKjsDScE/Be4dq0SO79kaj5sU1tM4C3hUn9+2c+4c2t3XBHPC8LeVBaq\nU6LLk1IuA8cynU6ZJYTAgjVkuxU6FsWSoJv74TVOKVWGrrvtDP7gY7onVeA5\n3pI16Q9HthdZ9qfvM69sFzz9Y2WK1XKN28NqW35rhdh9mowyZ9cB0pqjN7em\nnPV6sV1TD7uSxUJ0WKzDOxhmZDjqnYRd5D9jBajJuWgHjf8mKzL8hBaqo0zH\nPINjqU7zwvXe5r1a8gKYvqeDgYSMzZQy0oos/w7cLzy8f/5ptzn333cyRoqX\n9DIBt163z4FsdhcdzxnEj5wJL15lbRyUR0KlLOioJIuZ/Xi5FNd2YVhiRWR4\nWMzrtIgyR9b//Eu52OOAoLMp5flREHfWW4Ac6XekOiOwyXBxhs1dP7HC/WAb\nImdH\r\n=G1KB\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "939c31155b95bebc1ef6f76ae34dbf2c06046e52",
    "tarball": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-24.0.0-alpha.4.tgz",
    "unpackedSize": 7602
  },
  "engines": {
    "node": ">= 6"
  },
  "gitHead": "e41f0bb257c6652c3100b97a1087f9f812fbea0d",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "jeanlauliac",
      "email": "jean@lauliac.com"
    },
    {
      "name": "mjesun",
      "email": "mjesun@hotmail.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git"
  },
  "version": "24.0.0-alpha.4"
}
